const express = require('express');
const multer = require('multer');
const path = require('path');
const bodyParser = require('body-parser');
const axios = require('axios');
const fs = require('fs');

const app = express();
const port = process.env.PORT || 5000;

// Set up multer for file uploads
const upload = multer({ dest: 'uploads/' });

// Serve static files from the "static" directory
app.use(express.static('static'));

// Parse application/json
app.use(bodyParser.json());

// Serve the index.html file
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Handle the file upload and detection
app.post('/detect', upload.single('image'), async (req, res) => {
    const filePath = req.file.path;
    const fileName = req.file.filename;

    try {
        // Read the image file
        const image = fs.readFileSync(filePath);

        // Send the image to the YOLO model for detection (assuming you have a YOLO model endpoint)
        const response = await axios.post('http://your-yolo-model-endpoint', { image });

        const results = response.data;
        const detections = results.detections;

        let chips_list = [];
        let total_value = 0;
        let labels = [];

        for (const detection of detections) {
            const label = detection.label;
            chips_list.push(label);
            labels.push(label);
            if (label === '1') {
                total_value += parseInt(label);
            } else {
                total_value += (parseInt(label) / 100);
            }
        }

        const counts = chips_list.reduce((acc, label) => {
            acc[label] = (acc[label] || 0) + 1;
            return acc;
        }, {});

        let counts_text = 'You have:\n';
        for (const [label, count] of Object.entries(counts)) {
            const pluralized_element = count > 1 ? `${label}s` : label;
            counts_text += `${count}: ${pluralized_element}\n,`;
        }

        // Save the annotated image (this is just a placeholder, you need to actually generate the annotated image)
        const annotatedImagePath = `static/uploads/annotated_${fileName}.jpg`;
        fs.writeFileSync(annotatedImagePath, image);

        res.json({
            counts_text,
            total_number: `total number of chips: ${chips_list.length}`,
            total_value: `Total value of chips: ${total_value}â‚ª`,
            annotated_image: annotatedImagePath
        });

    } catch (error) {
        console.error(error);
        res.status(500).send('Error processing the image');
    } finally {
        // Delete the uploaded file
        fs.unlinkSync(filePath);
    }
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
